// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	msp "github.com/hyperledger/fabric/msp"
	mock "github.com/stretchr/testify/mock"

	protoutil "github.com/hyperledger/fabric/protoutil"
)

// Policy is an autogenerated mock type for the policy type
type Policy struct {
	mock.Mock
}

type Policy_Expecter struct {
	mock *mock.Mock
}

func (_m *Policy) EXPECT() *Policy_Expecter {
	return &Policy_Expecter{mock: &_m.Mock}
}

// EvaluateIdentities provides a mock function with given fields: identities
func (_m *Policy) EvaluateIdentities(identities []msp.Identity) error {
	ret := _m.Called(identities)

	if len(ret) == 0 {
		panic("no return value specified for EvaluateIdentities")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]msp.Identity) error); ok {
		r0 = rf(identities)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Policy_EvaluateIdentities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EvaluateIdentities'
type Policy_EvaluateIdentities_Call struct {
	*mock.Call
}

// EvaluateIdentities is a helper method to define mock.On call
//   - identities []msp.Identity
func (_e *Policy_Expecter) EvaluateIdentities(identities interface{}) *Policy_EvaluateIdentities_Call {
	return &Policy_EvaluateIdentities_Call{Call: _e.mock.On("EvaluateIdentities", identities)}
}

func (_c *Policy_EvaluateIdentities_Call) Run(run func(identities []msp.Identity)) *Policy_EvaluateIdentities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]msp.Identity))
	})
	return _c
}

func (_c *Policy_EvaluateIdentities_Call) Return(_a0 error) *Policy_EvaluateIdentities_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Policy_EvaluateIdentities_Call) RunAndReturn(run func([]msp.Identity) error) *Policy_EvaluateIdentities_Call {
	_c.Call.Return(run)
	return _c
}

// EvaluateSignedData provides a mock function with given fields: signatureSet
func (_m *Policy) EvaluateSignedData(signatureSet []*protoutil.SignedData) error {
	ret := _m.Called(signatureSet)

	if len(ret) == 0 {
		panic("no return value specified for EvaluateSignedData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]*protoutil.SignedData) error); ok {
		r0 = rf(signatureSet)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Policy_EvaluateSignedData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EvaluateSignedData'
type Policy_EvaluateSignedData_Call struct {
	*mock.Call
}

// EvaluateSignedData is a helper method to define mock.On call
//   - signatureSet []*protoutil.SignedData
func (_e *Policy_Expecter) EvaluateSignedData(signatureSet interface{}) *Policy_EvaluateSignedData_Call {
	return &Policy_EvaluateSignedData_Call{Call: _e.mock.On("EvaluateSignedData", signatureSet)}
}

func (_c *Policy_EvaluateSignedData_Call) Run(run func(signatureSet []*protoutil.SignedData)) *Policy_EvaluateSignedData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*protoutil.SignedData))
	})
	return _c
}

func (_c *Policy_EvaluateSignedData_Call) Return(_a0 error) *Policy_EvaluateSignedData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Policy_EvaluateSignedData_Call) RunAndReturn(run func([]*protoutil.SignedData) error) *Policy_EvaluateSignedData_Call {
	_c.Call.Return(run)
	return _c
}

// NewPolicy creates a new instance of Policy. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPolicy(t interface {
	mock.TestingT
	Cleanup(func())
}) *Policy {
	mock := &Policy{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
