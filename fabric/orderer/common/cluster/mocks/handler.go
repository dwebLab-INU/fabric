// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	orderer "github.com/hyperledger/fabric-protos-go/orderer"
	mock "github.com/stretchr/testify/mock"
)

// Handler is an autogenerated mock type for the Handler type
type Handler struct {
	mock.Mock
}

// OnConsensus provides a mock function with given fields: channel, sender, req
func (_m *Handler) OnConsensus(channel string, sender uint64, req *orderer.ConsensusRequest) error {
	ret := _m.Called(channel, sender, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint64, *orderer.ConsensusRequest) error); ok {
		r0 = rf(channel, sender, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OnSubmit provides a mock function with given fields: channel, sender, req
func (_m *Handler) OnSubmit(channel string, sender uint64, req *orderer.SubmitRequest) error {
	ret := _m.Called(channel, sender, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint64, *orderer.SubmitRequest) error); ok {
		r0 = rf(channel, sender, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewHandler interface {
	mock.TestingT
	Cleanup(func())
}

// NewHandler creates a new instance of Handler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHandler(t mockConstructorTestingTNewHandler) *Handler {
	mock := &Handler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
